#!/bin/bash

# agrab - entry point for the project Android frame-buffer GRABber
# Copyright (C) 2012 Basavanagowda Kanur
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
# USA.

function run_tee
{
    params="-p $pipe";

    if [ ! -z "$device" ]; then
        params="$params -s $device";
    fi

    if [ ! -z "$ASDK_PATH" ]; then
        params="$params -A $ASDK_PATH";
    fi

    COMMAND=$(echo "./afrab-tee ${params}")
    echo
    echo "run-tee: ${COMMAND}"

    ${COMMAND}
}

function run_encoder
{
    params="-i $pipe"

    if [ -z "$output" ]; then
	output="agrab-$device.mp4";

        if [ -z "$device" ]; then
            output="agrab.mp4";
        else
            params="$params -s $device";
        fi

        echo
	echo "no output file specified, using default - $output"
        echo
    fi


    params="$params -o $output";

    COMMAND="./afrab-enc $params"

    echo
    echo "run-encoder: ${COMMAND}"
    echo

    ${COMMAND}
}

function killtree
{
    # kill all the children, grandchildren, etc.,

    ppid="$1"

    for i in `ps -ef | awk '$3 == '$ppid' { print $2 }'`; do
        echo "$0: killing $i"
        kill -KILL $i
    done
}

function main
{
    run_tee &
    TEE_PID=$!;

    echo "afrab-tee is running with PID $TEE_PID"

    sleep 2;
    run_encoder;

    killtree $TEE_PID;

    wait
}

function usage
{
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo " -o, --output=OUTPUT-PATH"
    echo " -s, --serial=SERIAL-OF-ANDROID"
    echo " -L, --live"
    echo " -A, --android-sdk=ANDROID-SDK-PATH"
}

function parse_cmdline
{
    if [ `uname` == "Darwin" ]; then
	args=`getopt ho:s:LA: $@`
    elif [ `uname` == "Linux" ]; then
	args=`getopt -u -o ho:s:LA: \
	    --long help,output:,serial:,live,android-sdk: -- "$@"`;
    else
	echo "You need a GNU/Linux or Mac OS X to run $0";
	exit 0;
    fi

    if [ $? != 0 ]; then
        usage
	exit 2
    fi

    set -- $args

    for i; do
	case "$i" in
            -h|--help)
                usage;
                exit 0;;
	    -s|--serial)
		device="$2";
                echo "serial device is $device";
		shift;
		shift;;
	    -o|--output)
		output="$2";
		shift;
		shift;;
	    -L|--live)
		LIVE="-L";
		shift;;
            -A|--android-sdk)
                ASDK_PATH="$2";

		# check if ASDK_PATH actually contains android-sdk
		if [ ! -x ${ASDK_PATH}/platform-tools/adb ]; then
		    echo "$ASDK_PATH does not point to a valid android SDK";
		    exit 2;
		fi

                shift;
                shift;;
	    --)
		shift;
		break;;
	esac
    done
}

function init
{
    pipe=/tmp/agrab-$BASHPID-$device.pipe

    if [ -z "$device" ]; then
        echo
        echo "no device specified, assuming that adb has an established "
        echo "connection with an emulator/device"
        echo

        pipe=/tmp/agrab-$BASHPID.pipe
    fi


    echo
    echo "we shall use $pipe as pipe"
    echo

    if [ -z "$ASDK_PATH" ]; then
        if [ -v $ANDROID_SDK_PATH ]; then
            ASDK_PATH=${ANDROID_SDK_PATH}
        fi
    fi
}

parse_cmdline "$@" && init && main;
